From eaf300b61a56af151e93aa51803e6a61a0f8afee Mon Sep 17 00:00:00 2001
From: Marius Wachtler <undingen@gmail.com>
Date: Fri, 6 May 2016 16:19:50 +0100
Subject: [PATCH] [PATCH] Pyston change: make cython work with pyston

---
 Cython/Compiler/ExprNodes.py     | 9 +++++++++
 Cython/Utility/CythonFunction.c  | 4 +++-
 Cython/Utility/Exceptions.c      | 4 +++-
 Cython/Utility/ModuleSetupCode.c | 2 +-
 4 files changed, 16 insertions(+), 3 deletions(-)

diff --git a/Cython/Compiler/ExprNodes.py b/Cython/Compiler/ExprNodes.py
index f99ec6e..7ab41f3 100644
--- a/Cython/Compiler/ExprNodes.py
+++ b/Cython/Compiler/ExprNodes.py
@@ -7784,12 +7784,21 @@ class PyCFunctionNode(ExprNode, ModuleNameMixin):
 
     @classmethod
     def from_defnode(cls, node, binding):
+        """
+        # Pyston change: dont't generate custom code objects because we don't support them currently
         return cls(node.pos,
                    def_node=node,
                    pymethdef_cname=node.entry.pymethdef_cname,
                    binding=binding or node.specialized_cpdefs,
                    specialized_cpdefs=node.specialized_cpdefs,
                    code_object=CodeObjectNode(node))
+        """
+        return cls(node.pos,
+                   def_node=node,
+                   pymethdef_cname=node.entry.pymethdef_cname,
+                   binding=binding or node.specialized_cpdefs,
+                   specialized_cpdefs=node.specialized_cpdefs,
+                   code_object=None)
 
     def analyse_types(self, env):
         if self.binding:
diff --git a/Cython/Utility/CythonFunction.c b/Cython/Utility/CythonFunction.c
index 9cc38f0..ab05ad1 100644
--- a/Cython/Utility/CythonFunction.c
+++ b/Cython/Utility/CythonFunction.c
@@ -561,7 +561,9 @@ __Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
 #endif
 }
 
-#if CYTHON_COMPILING_IN_PYPY
+// Pyston change:
+// #if CYTHON_COMPILING_IN_PYPY
+#if 0 && CYTHON_COMPILING_IN_PYPY
 // originally copied from PyCFunction_Call() in CPython's Objects/methodobject.c
 // PyPy does not have this function
 static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
@@ -1143,7 +1145,9 @@
 //////////////////// ClassMethod ////////////////////
 
 static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
-#if CYTHON_COMPILING_IN_PYPY
+// pyston change:
+// #if CYTHON_COMPILING_IN_PYPY
+#if 0 && CYTHON_COMPILING_IN_PYPY
     if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
         // cdef classes
         return PyClassMethod_New(method);
@@ -1152,7 +1156,9 @@
     // It appears that PyMethodDescr_Type is not anywhere exposed in the Python/C API
     static PyTypeObject *methoddescr_type = NULL;
     if (methoddescr_type == NULL) {
-       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
+       // Pyston change:
+       // PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
+       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyUnicode_Type, "split");
        if (!meth) return NULL;
        methoddescr_type = Py_TYPE(meth);
        Py_DECREF(meth);
diff --git a/Cython/Utility/Exceptions.c b/Cython/Utility/Exceptions.c
index 354a776..567970d 100644
--- a/Cython/Utility/Exceptions.c
+++ b/Cython/Utility/Exceptions.c
@@ -528,7 +528,9 @@ static void __Pyx_AddTraceback(const char *funcname, int c_line,
         0                    /*PyObject *locals*/
     );
     if (!py_frame) goto bad;
-    py_frame->f_lineno = py_line;
+    // Pyston change:
+    // py_frame->f_lineno = py_line;
+    PyFrame_SetLineNumber(py_frame, py_line);
     PyTraceBack_Here(py_frame);
 bad:
     Py_XDECREF(py_code);
diff --git a/Cython/Utility/ModuleSetupCode.c b/Cython/Utility/ModuleSetupCode.c
index 6477fb2..75dcdda 100644
--- a/Cython/Utility/ModuleSetupCode.c
+++ b/Cython/Utility/ModuleSetupCode.c
@@ -32,7 +32,7 @@
   #define Py_HUGE_VAL HUGE_VAL
 #endif
 
-#ifdef PYPY_VERSION
+#if defined(PYPY_VERSION) || defined(PYSTON_VERSION)
 #define CYTHON_COMPILING_IN_PYPY 1
 #define CYTHON_COMPILING_IN_CPYTHON 0
 #else
-- 
1.9.1

