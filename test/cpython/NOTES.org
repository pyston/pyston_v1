These are rntz's notes from trying to get the CPython testing framework to run,
for future reference.

* getting regrtest to work is hard
regrtest works by __import__()ing the tests to be run and then doing some stuff.
This means that if even a single test causes pyston to crash or assert(), the
whole test-runner dies.

The best fix for this would be to simply run each test in a separate pyston
process. It's not clear to accomplish this without breaking the tests, however,
because Python's test support is a big, gnarly piece of code. In particular, it
will skip tests based on various criteria, which we probably want to support.
But it's not clear how to disentangle that knowledge from the way it __import__s
the tests.

So instead I ran regrtest manually, looked at what tests it ran, and imported
those. tester.py will run them separately.

** Obsolete notes: Hacking regrtest to manually change directories
Need to run test/regrtest.py for testing harness; The standard way to do this in
CPython is `python -m test.regrtest` from Lib/. The -m is important because
otherwise it can't find the tests properly. Turns out implementing the -m flag
is hard, because the machinery for imports is pretty complicated and there's no
easy way to ask it "which file *would* I load to import this module". So I
hacked regrtest to manually change directories.

** Obsolete FIXME for regrtest.py: CFG/analysis bug with osr
test/regrtest.py trips an assert in PropagatingTypeAnalysis::getTypeAtBlockStart
if not run with -I, looks like malformed CFG or bug in analysis
* tests are slow
CPython's tests are pretty slow for us. In particular, since we're not running
with regrtest, we have to go through the set-up time of loading
test.test_support for each test. On my machine it's that's about a half-second
per test.

To handle this, by default we don't run tests marked "expected: fail". To
disable this, pass --all-cpython-tests to tester.py.

* bugs uncovered
The CPython tests I've included fail for various reasons. Recurring issues include:
- use of compile()
- missing __hash__ implementations for some builtin types
- we don't have imp.get_magic()
- segfaults
- missing __name__ attributes on capifuncs
- missing sys.__stdout__ attribute
- serialize_ast.cpp: writeColOffset: assert(v < 100000 || v == -1) gets tripped
- pypa-parser.cpp: readName: assert(e.type == pypa::AstType::Name)
- src/runtime/util.cpp: parseSlice: assert(isSubclass(start->cls, int_cls) || start->cls == none_cls)

** list of files & why they're failing
FILE                    REASONS
------------------------------------------------------
test_abstract_numbers   missing .real attribute
test_augassign          bugs in +=, compile()
test_bisect             somehow sys.modules['_bisect'] is getting set to 0
test_builtin            execfile scoping issue
test_coercion           serialize_ast bug (AST node not getting correct lineno or col_offset set)
test_collections        compile()
test_compare            segfault
test_complex            serialize_ast assert
test_complex_args       we apparently don't always unpack args correctly
test_contextlib         file.closed, lock.locked attributes
test_datetime           kwargs bug in BoxedMethodDescriptor
test_decimal            float.__getformat__
test_decorators         compile(), func_name attribute, and another bug in test_eval_order
test_defaultdict        "False is not true"
test_deque              assert in _collectionsmodule.c
test_descr              PySequence_Tuple
test_descrtut           doctest, compile()
test_dict               infinite recursion in dict.__repr__
test_dictcomps          compile()
test_dictviews          various unique bugs
test_doctest            code.co_firstlineno, compile()
test_doctest2           code.co_firstlineno, compile()
test_enumerate          wrong assert in BoxedEnumerate
test_exceptions         segfault in dictIterNext
test_extcall            doctest (compile())
test_file               segfaults
test_file2k             "Someone called abort!"
test_file_eintr         TypeError
test_filecmp            float.__hash__
test_float              capifunc.__name__ in fractions
test_format             can't float(long)
test_funcattrs          segfault
test_functools          segfault
test_generators         doctest (compile())
test_genexps            doctest (compile())
test_getopt             doctest (compile())
test_global             compile()
test_grammar            bug in our tokenizer
test_hash               float.__hash__
test_index              parseSlice assert
test_int                float.__getformat__
test_io                 parseSlice assert
test_json               doctest (compile())
test_list               assert in sliceIndex to do with a[1L:2L]
test_long               float.__getformat__
test_math               float.__getformat__
test_module             exec in globals_
test_mutants            needs cmp()
test_opcodes            TypeError: exceptions must be old-style classes or derived from BaseException, not instance
test_operator           BoxedCApiFunction::__call__: assert(varargs->elts.size() == 1)
test_optparse           long.cpp: _longNew: assert(r == 0)
test_pep277             segfaults
test_pep352             various unique bugs
test_pkg                unknown bug
test_popen              objmodel.cpp: callCLFunc: assert(chosen_cfg->spec->rtn_type->isFitBy(r->cls))
test_pow                global name `pow' is not defined
test_property           unknown bug
test_random             floats unhashable
test_repr               complex.__hash__
test_richcmp            some missing C API functions
test_scope              eval of code object
test_set                list.__hash__
test_setcomps           doctest (compile())
test_sets               doctest (compile())
test_slice              slice.__hash__
test_sort               listSort(): cmp not supported
test_stat               16384 != 40960; I guess we implement stat wrong or something?
test_str                memory leak?
test_string             infinite loops in test_replace
test_subprocess         exit code 141, no error message
test_tuple              parseSlice assert
test_types              func_name attribute
test_unary              objmodel.cpp: unaryop: Assertion `attr_func' failed: str.__pos__
test_undocumented_details   cmp()
test_unicode            sys.maxunicode
test_unicode_file       exit code 139, no error message
test_unittest           serialize_ast assert
test_unpack             doctest (compile())
test_urllib2            doctest (compile())
test_userdict           segfault
test_userlist           sliceIndex assert
test_userstring         std::length_error
test_uuid               long.cpp: _longNew: assert(r == 0)
test_weakref            collector.cpp: runCollection: isValidGCObject(head) failed
test_weakset            set.cpp: setIssubset: assert(container->cls == set_cls)
test_with               objmodel.cpp: getclsattr: Assertion `gotten' failed: LacksExit:__exit__
test_wsgiref            ast_interpreter.cpp: createFunction: Assertion `closure' failed.
test_xrange             xrange of long
