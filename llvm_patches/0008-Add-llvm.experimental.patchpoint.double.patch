From b1fd8c81830c14e712b3c2da5379a506a11dc59f Mon Sep 17 00:00:00 2001
From: Kevin Modzelewski <kevmod@gmail.com>
Date: Thu, 9 Oct 2014 04:37:33 +0000
Subject: [PATCH] Add llvm.experimental.patchpoint.double

Differential Revision: http://reviews.llvm.org/D5696
---
 docs/StackMaps.rst                                |  3 +++
 include/llvm/IR/Intrinsics.td                     |  5 +++++
 lib/CodeGen/SelectionDAG/FastISel.cpp             |  8 +++++++-
 lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp  |  4 +++-
 lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp     |  1 +
 lib/IR/Verifier.cpp                               |  1 +
 lib/Target/AArch64/AArch64TargetTransformInfo.cpp |  1 +
 lib/Target/X86/X86TargetTransformInfo.cpp         |  1 +
 test/CodeGen/X86/anyregcc.ll                      | 24 +++++++++++++++++++++--
 test/CodeGen/X86/patchpoint.ll                    | 17 ++++++++++++++++
 10 files changed, 61 insertions(+), 4 deletions(-)

diff --git a/docs/StackMaps.rst b/docs/StackMaps.rst
index 43c60c9..c900c97 100644
--- a/docs/StackMaps.rst
+++ b/docs/StackMaps.rst
@@ -192,6 +192,9 @@ Syntax:
       declare i64
         @llvm.experimental.patchpoint.i64(i64 <id>, i32 <numBytes>,
                                           i8* <target>, i32 <numArgs>, ...)
+      declare double
+        @llvm.experimental.patchpoint.double(i64 <id>, i32 <numBytes>,
+                                          i8* <target>, i32 <numArgs>, ...)
 
 Overview:
 """""""""
diff --git a/include/llvm/IR/Intrinsics.td b/include/llvm/IR/Intrinsics.td
index 4052a31..8e72f98 100644
--- a/include/llvm/IR/Intrinsics.td
+++ b/include/llvm/IR/Intrinsics.td
@@ -519,6 +519,11 @@ def int_experimental_patchpoint_i64 : Intrinsic<[llvm_i64_ty],
                                                  llvm_ptr_ty, llvm_i32_ty,
                                                  llvm_vararg_ty],
                                                  [Throws]>;
+def int_experimental_patchpoint_double : Intrinsic<[llvm_double_ty],
+                                                [llvm_i64_ty, llvm_i32_ty,
+                                                 llvm_ptr_ty, llvm_i32_ty,
+                                                 llvm_vararg_ty],
+                                                 [Throws]>;
 
 
 //===------------------------ Garbage Collection Intrinsics ---------------===//
diff --git a/lib/CodeGen/SelectionDAG/FastISel.cpp b/lib/CodeGen/SelectionDAG/FastISel.cpp
index 2b624ad..633f0a9 100644
--- a/lib/CodeGen/SelectionDAG/FastISel.cpp
+++ b/lib/CodeGen/SelectionDAG/FastISel.cpp
@@ -740,7 +740,12 @@ bool FastISel::selectPatchpoint(const CallInst *I) {
   // Add an explicit result reg if we use the anyreg calling convention.
   if (IsAnyRegCC && HasDef) {
     assert(CLI.NumResultRegs == 0 && "Unexpected result register.");
-    CLI.ResultReg = createResultReg(TLI.getRegClassFor(MVT::i64));
+    if (I->getType()->isIntegerTy(64))
+      CLI.ResultReg = createResultReg(TLI.getRegClassFor(MVT::i64));
+    else if (I->getType()->isDoubleTy())
+      CLI.ResultReg = createResultReg(TLI.getRegClassFor(MVT::f64));
+    else
+      llvm_unreachable("unsupported patchpoint type");
     CLI.NumResultRegs = 1;
     Ops.push_back(MachineOperand::CreateReg(CLI.ResultReg, /*IsDef=*/true));
   }
@@ -1219,6 +1224,7 @@ bool FastISel::selectIntrinsicCall(const IntrinsicInst *II) {
     return selectStackmap(II);
   case Intrinsic::experimental_patchpoint_void:
   case Intrinsic::experimental_patchpoint_i64:
+  case Intrinsic::experimental_patchpoint_double:
     return selectPatchpoint(II);
   }
 
diff --git a/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp b/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
index 2c81313..4417095 100644
--- a/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
+++ b/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
@@ -2008,6 +2008,7 @@ void SelectionDAGBuilder::visitInvoke(const InvokeInst &I) {
       break;
     case Intrinsic::experimental_patchpoint_void:
     case Intrinsic::experimental_patchpoint_i64:
+      case Intrinsic::experimental_patchpoint_double:
       visitPatchpoint(&I, LandingPad);
       break;
     case Intrinsic::experimental_gc_statepoint:
@@ -5376,7 +5377,8 @@ SelectionDAGBuilder::visitIntrinsicCall(const CallInst &I, unsigned Intrinsic) {
     return nullptr;
   }
   case Intrinsic::experimental_patchpoint_void:
-  case Intrinsic::experimental_patchpoint_i64: {
+  case Intrinsic::experimental_patchpoint_i64:
+  case Intrinsic::experimental_patchpoint_double: {
     visitPatchpoint(&I);
     return nullptr;
   }
diff --git a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp b/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
index 235cda6..309f2dd 100644
--- a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
+++ b/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
@@ -1140,6 +1140,7 @@ static void collectFailStats(const Instruction *I) {
         NumFastIselFailStackMap++; return;
       case Intrinsic::experimental_patchpoint_void: // fall-through
       case Intrinsic::experimental_patchpoint_i64:
+      case Intrinsic::experimental_patchpoint_double:
         NumFastIselFailPatchPoint++; return;
       }
     }
diff --git a/lib/IR/Verifier.cpp b/lib/IR/Verifier.cpp
index 7001c55..74aff29 100644
--- a/lib/IR/Verifier.cpp
+++ b/lib/IR/Verifier.cpp
@@ -2821,6 +2821,7 @@ void Verifier::visitInstruction(Instruction &I) {
               F->getIntrinsicID() == Intrinsic::donothing ||
               F->getIntrinsicID() == Intrinsic::experimental_patchpoint_void ||
               F->getIntrinsicID() == Intrinsic::experimental_patchpoint_i64 ||
+              F->getIntrinsicID() == Intrinsic::experimental_patchpoint_double ||
               F->getIntrinsicID() == Intrinsic::experimental_gc_statepoint,
           "Cannot invoke an intrinsinc other than"
           " donothing or patchpoint",
diff --git a/lib/Target/AArch64/AArch64TargetTransformInfo.cpp b/lib/Target/AArch64/AArch64TargetTransformInfo.cpp
index 0533355..b5230cb 100644
--- a/lib/Target/AArch64/AArch64TargetTransformInfo.cpp
+++ b/lib/Target/AArch64/AArch64TargetTransformInfo.cpp
@@ -160,6 +160,7 @@ unsigned AArch64TTIImpl::getIntImmCost(Intrinsic::ID IID, unsigned Idx,
     break;
   case Intrinsic::experimental_patchpoint_void:
   case Intrinsic::experimental_patchpoint_i64:
+  case Intrinsic::experimental_patchpoint_double:
     if ((Idx < 4) || (Imm.getBitWidth() <= 64 && isInt<64>(Imm.getSExtValue())))
       return TTI::TCC_Free;
     break;
diff --git a/lib/Target/X86/X86TargetTransformInfo.cpp b/lib/Target/X86/X86TargetTransformInfo.cpp
index 5136619..9f455eb 100644
--- a/lib/Target/X86/X86TargetTransformInfo.cpp
+++ b/lib/Target/X86/X86TargetTransformInfo.cpp
@@ -1102,6 +1102,7 @@ unsigned X86TTIImpl::getIntImmCost(Intrinsic::ID IID, unsigned Idx,
     break;
   case Intrinsic::experimental_patchpoint_void:
   case Intrinsic::experimental_patchpoint_i64:
+  case Intrinsic::experimental_patchpoint_double:
     if ((Idx < 4) || (Imm.getBitWidth() <= 64 && isInt<64>(Imm.getSExtValue())))
       return TTI::TCC_Free;
     break;
diff --git a/test/CodeGen/X86/anyregcc.ll b/test/CodeGen/X86/anyregcc.ll
index 129aadf..60cf97e 100644
--- a/test/CodeGen/X86/anyregcc.ll
+++ b/test/CodeGen/X86/anyregcc.ll
@@ -11,11 +11,11 @@
 ; CHECK-NEXT:   .byte 0
 ; CHECK-NEXT:   .short 0
 ; Num Functions
-; CHECK-NEXT:   .long 8
+; CHECK-NEXT:   .long 9
 ; Num Constants
 ; CHECK-NEXT:   .long 0
 ; Num Callsites
-; CHECK-NEXT:   .long 8
+; CHECK-NEXT:   .long 9
 
 ; Functions and stack size
 ; CHECK-NEXT:   .quad _test
@@ -26,6 +26,8 @@
 ; CHECK-NEXT:   .quad 24
 ; CHECK-NEXT:   .quad _property_access3
 ; CHECK-NEXT:   .quad 24
+; CHECK-NEXT:   .quad _property_access_double
+; CHECK-NEXT:   .quad 8
 ; CHECK-NEXT:   .quad _anyreg_test1
 ; CHECK-NEXT:   .quad 56
 ; CHECK-NEXT:   .quad _anyreg_test2
@@ -132,6 +134,23 @@ entry:
   ret i64 %ret
 }
 
+; property access double
+; CHECK-LABEL:  .long   L{{.*}}_property_access_double
+; CHECK-NEXT:   .short  0
+; 2 locations
+; CHECK-NEXT:   .short  1
+; Loc 0: Register <-- this is the return register
+; CHECK-NEXT:   .byte 1
+; CHECK-NEXT:   .byte 16
+; CHECK-NEXT:   .short {{[0-9]+}}
+; CHECK-NEXT:   .long 0
+define double @property_access_double() nounwind ssp uwtable {
+entry:
+  %f = inttoptr i64 12297829382473034410 to i8*
+  %ret = call anyregcc double (i64, i32, i8*, i32, ...) @llvm.experimental.patchpoint.double(i64 1, i32 15, i8* %f, i32 0)
+  ret double %ret
+}
+
 ; anyreg_test1
 ; CHECK-LABEL:  .long   L{{.*}}-_anyreg_test1
 ; CHECK-NEXT:   .short  0
@@ -466,3 +485,4 @@ entry:
 
 declare void @llvm.experimental.patchpoint.void(i64, i32, i8*, i32, ...)
 declare i64 @llvm.experimental.patchpoint.i64(i64, i32, i8*, i32, ...)
+declare double @llvm.experimental.patchpoint.double(i64, i32, i8*, i32, ...)
diff --git a/test/CodeGen/X86/patchpoint.ll b/test/CodeGen/X86/patchpoint.ll
index 82b15c3..939e7bd 100644
--- a/test/CodeGen/X86/patchpoint.ll
+++ b/test/CodeGen/X86/patchpoint.ll
@@ -36,6 +36,22 @@ entry:
   ret i64 %result
 }
 
+define double @double_patchpoint(double %p1, double %p2, double %p3, double %p4) {
+entry:
+; CHECK-LABEL: double_patchpoint:
+; CHECK:      movabsq $-559038736, %r11
+; CHECK-NEXT: callq *%r11
+; CHECK-NEXT: xchgw %ax, %ax
+; CHECK:      movsd %xmm0, [[SPILL:[^ ]+]]
+; CHECK:      callq *%r11
+; CHECK-NEXT: xchgw %ax, %ax
+; CHECK:      movsd [[SPILL]], %xmm0
+; CHECK:      ret
+  %resolveCall2 = inttoptr i64 -559038736 to i8*
+  %result = tail call double (i64, i32, i8*, i32, ...) @llvm.experimental.patchpoint.double(i64 2, i32 15, i8* %resolveCall2, i32 4, double %p1, double %p2, double %p3, double %p4)
+  %result2 = tail call double (i64, i32, i8*, i32, ...) @llvm.experimental.patchpoint.double(i64 2, i32 15, i8* %resolveCall2, i32 4, double %p1, double %p2, double %p3, double %p4)
+  ret double %result
+}
 
 ; Caller frame metadata with stackmaps. This should not be optimized
 ; as a leaf function.
@@ -101,3 +117,4 @@ entry:
 declare void @llvm.experimental.stackmap(i64, i32, ...)
 declare void @llvm.experimental.patchpoint.void(i64, i32, i8*, i32, ...)
 declare i64 @llvm.experimental.patchpoint.i64(i64, i32, i8*, i32, ...)
+declare double @llvm.experimental.patchpoint.double(i64, i32, i8*, i32, ...)
-- 
1.9.1


