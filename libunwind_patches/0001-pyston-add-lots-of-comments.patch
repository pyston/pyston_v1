From 851b35ec5f1e27273fcf271e94364ced31baa2b5 Mon Sep 17 00:00:00 2001
From: Michael Arntzenius <daekharel@gmail.com>
Date: Mon, 18 May 2015 17:47:38 -0700
Subject: [PATCH 1/2] pyston: add lots of comments

---
 src/dwarf/Gparser.c     | 3 +++
 src/mi/Gdyn-extract.c   | 3 ++-
 src/mi/Gget_proc_name.c | 3 +++
 src/x86_64/Gstep.c      | 2 +-
 4 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/src/dwarf/Gparser.c b/src/dwarf/Gparser.c
index fefd809..a5dd943 100644
--- a/src/dwarf/Gparser.c
+++ b/src/dwarf/Gparser.c
@@ -429,6 +429,7 @@ fetch_proc_info (struct dwarf_cursor *c, unw_word_t ip, int need_unwind_info)
   memset (&c->pi, 0, sizeof (c->pi));
 
   /* check dynamic info first --- it overrides everything else */
+  /* TODO rntz: this might be slow when there are lots of jitted functions */
   ret = unwi_find_dynamic_proc_info (c->as, ip, &c->pi, need_unwind_info,
 				     c->as_arg);
   if (ret == -UNW_ENOINFO)
@@ -543,6 +544,7 @@ get_rs_cache (unw_addr_space_t as, intrmask_t *saved_maskp)
       lock_acquire (&cache->lock, *saved_maskp);
     }
 
+  /* XXX rntz: this looks dangerous. why does it need to be atomic? */
   if (atomic_read (&as->cache_generation) != atomic_read (&cache->generation))
     {
       flush_rs_cache (cache);
@@ -921,6 +923,7 @@ dwarf_create_state_record (struct dwarf_cursor *c, dwarf_state_record_t *sr)
 HIDDEN int
 dwarf_make_proc_info (struct dwarf_cursor *c)
 {
+    /* TODO rntz: why is this #if 0'd? does the cache not work? check upstream. */
 #if 0
   if (c->as->caching_policy == UNW_CACHE_NONE
       || get_cached_proc_info (c) < 0)
diff --git a/src/mi/Gdyn-extract.c b/src/mi/Gdyn-extract.c
index 5258839..12ba31f 100644
--- a/src/mi/Gdyn-extract.c
+++ b/src/mi/Gdyn-extract.c
@@ -33,7 +33,8 @@ unwi_extract_dynamic_proc_info (unw_addr_space_t as, unw_word_t ip,
   pi->start_ip = di->start_ip;
   pi->end_ip = di->end_ip;
   pi->gp = di->gp;
-  pi->format = di->format;
+  pi->format = di->format;      /* XXX rntz: is this wrong? */
+  /* This is the point at which we can end up knowing we'll return a non-UNW_INFO_FORMAT_DYNAMIC unwind_info field. */
   switch (di->format)
     {
     case UNW_INFO_FORMAT_DYNAMIC:
diff --git a/src/mi/Gget_proc_name.c b/src/mi/Gget_proc_name.c
index 7251c59..485346c 100644
--- a/src/mi/Gget_proc_name.c
+++ b/src/mi/Gget_proc_name.c
@@ -55,9 +55,12 @@ get_proc_name (unw_addr_space_t as, unw_word_t ip,
 
   buf[0] = '\0';	/* always return a valid string, even if it's empty */
 
+  /* FIXME rntz: this ends up copying a dwarf_cie_info pi.unwind_info,
+   * and then reading it back as an unw_dyn_info_t! */
   ret = unwi_find_dynamic_proc_info (as, ip, &pi, 1, arg);
   if (ret == 0)
     {
+      assert(pi.format == UNW_INFO_FORMAT_DYNAMIC); /* FIXME rntz: handle this being false. */
       unw_dyn_info_t *di = pi.unwind_info;
 
       if (offp)
diff --git a/src/x86_64/Gstep.c b/src/x86_64/Gstep.c
index 809d60b..e4312af 100644
--- a/src/x86_64/Gstep.c
+++ b/src/x86_64/Gstep.c
@@ -158,7 +158,7 @@ unw_step (unw_cursor_t *cursor)
 	    }
 	  else
 	    {
-	      unw_word_t rbp1 = 0;
+	      unw_word_t rbp1 = 0; /* might want to put an assert here to check for guessing */
 	      rbp_loc = DWARF_LOC(rbp, 0);
 	      rsp_loc = DWARF_NULL_LOC;
 	      rip_loc = DWARF_LOC (rbp + 8, 0);
-- 
2.1.0

